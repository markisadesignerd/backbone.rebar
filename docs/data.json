{
    "project": {
        "name": "Backbone.Rebar",
        "description": "Adding a little bit more reinforcement to an already spectacular framework.",
        "version": "0.4.0",
        "url": "https://github.com/mcgaryes/rebar",
        "logo": "../rebar.png"
    },
    "files": {
        "../temp/backbone.rebar.js": {
            "name": "../temp/backbone.rebar.js",
            "modules": {},
            "classes": {
                "Rebar.Application": 1,
                "Rebar.PersistenceModel": 1,
                "Rebar.View": 1,
                "Rebar.CompositeView": 1,
                "Rebar.Mediator": 1,
                "Rebar.Controller": 1,
                "Rebar.DependencyRouter": 1,
                "Rebar.Logger": 1
            },
            "fors": {
                "Rebar.Application": 1,
                "Rebar.Mediator": 1
            },
            "namespaces": {
                "Rebar": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "Rebar.Application": {
            "name": "Rebar.Application",
            "shortname": "Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Rebar",
            "file": "../temp/backbone.rebar.js",
            "line": 48,
            "description": "The application shell provides a simple default architecture consisting of a model,\nview and controller. The application is a singleton class in that there can only be one.\nIt extend `Backbone.Events` and you can see the [documentation](http://backbonejs.org/#Events)\nfor more detailed information.",
            "is_constructor": 1,
            "extends": "Backbone.Events",
            "uses": [
                "extend"
            ],
            "example": [
                "\n\tvar appConfig = {\n\t\t...\n\t};\n\tvar app = new Backbone.Rebar.Application(appConfig);\n\tapp.on(\"applicationStateChange\",function(state){\n\t\t...\n\t});\n\tapp.startup();"
            ]
        },
        "Rebar.PersistenceModel": {
            "name": "Rebar.PersistenceModel",
            "shortname": "PersistenceModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Rebar",
            "file": "../temp/backbone.rebar.js",
            "line": 276,
            "description": "The `PeristenceModel` extends the basic [Backbone.Model](http://backbonejs.org/#Model)\nand overwrites its sync method to take advantage of local storage and persist data\nacross multiple pages within the same domain. The url property is used to grab data\nfrom a specific object of the localStorage object. Use the `fetch` method to pull\nwhatever data already exists in localStorage and use the `save` method to store for\nlater use.",
            "extends": "Backbone.Model",
            "is_constructor": 1,
            "example": [
                "\n\tvar model = new Backbone.Rebar.PersistenceModel({\n\t\turl:\"custom\"\n\t});\n\tmodel.fetch();\n\tmodel.set(\"foo\",\"bar\");\n\tmodel.save();"
            ]
        },
        "Rebar.View": {
            "name": "Rebar.View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Rebar",
            "file": "../temp/backbone.rebar.js",
            "line": 381,
            "description": "Base class that extends [Backbone.View](http://backbonejs.org/#View) and\nprovides boilerplate plate functionality for transitioning in and out, destroying\nand rendering views.",
            "is_constructor": 1,
            "extends": "Backbone.View",
            "example": [
                "\n\tvar view = new Backbone.Rebar.View({\n\t\t...\n\t});\n\tview.transitionIn({\n\t\t...\n\t});\n\tview.transitionOut({\n\t\tthis.destroy();\n\t},this);"
            ]
        },
        "Rebar.CompositeView": {
            "name": "Rebar.CompositeView",
            "shortname": "CompositeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Rebar",
            "file": "../temp/backbone.rebar.js",
            "line": 483,
            "description": "Most of the time Backbone views need to be able to contain other views. When you do this you run\ninto situations where you need to add the view then render and when you go to destroy the parent\nview, you want to make sure you properly dispose of its children.\nThe composite view makes managing child parent relationships a bit easier by adding recursive destroy\nfunctionality as well as making it possible to quickly add and remove child views.",
            "extends": "View",
            "is_constructor": 1,
            "example": [
                "\n\tvar composite = new Backbone.Rebar.CompositeView({\n\t\t...\n\t});\n\tvar view = new Backbone.Rebar.View({\n\t\t...\n\t});\n\tcomposite.addSubView(view);"
            ]
        },
        "Rebar.Mediator": {
            "name": "Rebar.Mediator",
            "shortname": "Mediator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Rebar",
            "file": "../temp/backbone.rebar.js",
            "line": 627,
            "description": "Simple implementation of the mediator pattern for use with Backbone.Views.\nevent architecture",
            "is_constructor": 1,
            "uses": [
                "extend"
            ],
            "example": [
                "\n\tvar mediator = new Mediator({\n\t\tevents:{\n\t\t\t\"appwide1\":{\n\t\t\t\tdispatcher:app\n\t\t\t\tcallback:\"method\"\n\t\t\t}\n\t\t},\n\t\tinitialize:function(options){\n\t\t\t...\n\t\t},\n\t\tmethod:function(e){\n\t\t\t...\n\t\t},\n\t\thandle:function(eventName,module){\n\t\t\t...\n\t\t}\n\t});\n\tmediator.addView(view,\"event1 event2\");\n\tview.trigger(\"something\",view);\n\tmediator.removeView(view);"
            ]
        },
        "Rebar.Controller": {
            "name": "Rebar.Controller",
            "shortname": "Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Rebar",
            "file": "../temp/backbone.rebar.js",
            "line": 907,
            "description": "Simple controller object.",
            "is_constructor": 1,
            "extends": "Backbone.Events",
            "uses": [
                "extend"
            ],
            "todo": [
                "Determain what other functionality needs to be a part of the controller."
            ]
        },
        "Rebar.DependencyRouter": {
            "name": "Rebar.DependencyRouter",
            "shortname": "DependencyRouter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Rebar",
            "file": "../temp/backbone.rebar.js",
            "line": 940,
            "description": "Handles all pre and post routing functionality. This is the default router when you initialize\nan `Application` instance. Once initialized any time the browser's anchor location changes this\nclass notifies the rest of the application of the new directory, file, view and anchor to use.\nTo use simply listen to the application's `routeDidChange` or the router's `routeDidChange` event firing\nand then implement the AMD loader that makes the most sense (for your project) to use.",
            "extends": "Backbone.Router",
            "is_constructor": 1,
            "example": [
                "\n\t// requirejs example\n\trouter.on(\"routeDidChange\", function(route){\n\t\tvar mReq = require([resource], function(a) {\n\t\t\tvar Constructor = a[view];\n\t\t\tvar v = new Constructor({\n\t\t\t\trouteData: data\n\t\t\t});\n\t\t\tdelegate.addSubView(v);\n\t\t}, function(e) {\n\t\t\tconsole.log(\"Error: \" + e);\n\t\t});\n\t});"
            ]
        },
        "Rebar.Logger": {
            "name": "Rebar.Logger",
            "shortname": "Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Rebar",
            "file": "../temp/backbone.rebar.js",
            "line": 1195,
            "description": "Logger"
        }
    },
    "classitems": [
        {
            "file": "../temp/backbone.rebar.js",
            "line": 4,
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 29,
            "description": "Extention functionality for the prototyped object that implements it.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "protoProps",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "child",
                "type": "Object"
            },
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 87,
            "description": "Available states for the application used to describe the current state of the applicaiton.",
            "itemtype": "property",
            "name": "States",
            "type": "Object",
            "final": 1,
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 104,
            "description": "The current state value.",
            "itemtype": "property",
            "name": "_state",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 116,
            "description": "Getters and setters for the current state value.",
            "itemtype": "property",
            "name": "state",
            "type": "Integer",
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 150,
            "description": "Initialization functionality for extended Applicaiton instances.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 160,
            "description": "Create a model instance for the Applicaiton instance.",
            "itemtype": "method",
            "name": "createModel",
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 174,
            "description": "Create a view instance for the Applicaiton instance.",
            "itemtype": "method",
            "name": "createView",
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 192,
            "description": "Create a view instance for the Applicaiton instance.",
            "itemtype": "method",
            "name": "createView",
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 208,
            "description": "Create a dependency router instance for the Applicaiton instance.",
            "itemtype": "method",
            "name": "createRouter",
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 228,
            "description": "This method kicks off Backbone's history managment as well as loads the bootstrap data\nif a reference was passed through the contructors options argument.",
            "itemtype": "method",
            "name": "startup",
            "class": "Rebar.Application",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 296,
            "description": "Determains and returns a storage id based on the passed id in initialization",
            "itemtype": "method",
            "name": "getStoargeId",
            "return": {
                "description": "storage id for this persistence model",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Rebar.PersistenceModel",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 312,
            "description": "Overriden to make sure that we have a urlRoot on our persistence model",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "val",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Rebar.PersistenceModel",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 328,
            "description": "Overridden to reroute the to a localStorage endpoint.",
            "itemtype": "method",
            "name": "sync",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "PersistenceModel"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rebar.PersistenceModel",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 350,
            "description": "Helper method pulls data based on urlRoot from local storage",
            "itemtype": "method",
            "name": "pullLocalStore",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "PersistenceModel"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Rebar.PersistenceModel",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 406,
            "description": "Reference to the views controller",
            "itemtype": "property",
            "name": "controller",
            "type": "Controller",
            "class": "Rebar.View",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 416,
            "description": "This method is a great helper method to call when the subclass view is about to be removed.\nIt recursively will call destroy on any subviews reference in the sub views array. It also handles\nremoving any event listeners that may have been added to the subViews array.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Rebar.View",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 435,
            "description": "For instances that are used in dependency routing the render method is called\nand used directly after loading. For all other uses you must call render manually.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Rebar.View",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 448,
            "description": "Transitions in the view. By default this method actually does nothing.",
            "itemtype": "method",
            "name": "transitionIn",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Rebar.View",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 462,
            "description": "Transitions out the view. By default this method actually does nothing.",
            "itemtype": "method",
            "name": "transitionOut",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Rebar.View",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 509,
            "description": "Adds a sub view to a container BaseView",
            "itemtype": "method",
            "name": "addSubView",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "View"
                }
            ],
            "class": "Rebar.CompositeView",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 533,
            "description": "Adds an array of sub views to a container BaseView",
            "itemtype": "method",
            "name": "addSubViews",
            "params": [
                {
                    "name": "views",
                    "description": "Array of subviews",
                    "type": "Array"
                }
            ],
            "class": "Rebar.CompositeView",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 547,
            "description": "Removes a sub view from the container view",
            "itemtype": "method",
            "name": "removeSubView",
            "params": [
                {
                    "name": "view",
                    "description": "A base view or a cid of the sub view",
                    "type": "Object"
                }
            ],
            "class": "Rebar.CompositeView",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 568,
            "description": "Removes all sub views from view",
            "itemtype": "method",
            "name": "removeAllSubViews",
            "class": "Rebar.CompositeView",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 581,
            "description": "This method is a great helper method to call when the subclass view is about to be removed.\nIt recursively will call destroy on any subviews reference in the sub views array. It also handles\nremoving any event listeners that may have been added to the subViews array.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Rebar.CompositeView",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 601,
            "description": "Checks to see if the passed view has destroy functionality and then if it does not\ncalls the prototype destroy functionality and passes the reference",
            "itemtype": "method",
            "name": "destroySubView",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "View"
                }
            ],
            "class": "Rebar.CompositeView",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 672,
            "description": "Stores reference to all views added to the mediator.",
            "itemtype": "property",
            "name": "_views",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 685,
            "description": "Reference to a single view who we'll be mediating for.",
            "itemtype": "property",
            "name": "view",
            "type": "Backbone.View",
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 697,
            "description": "Called for any modules that extend the `Mediator` prototype.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 707,
            "description": "Adds module as one that the mediator should be listening for events.",
            "itemtype": "method",
            "name": "addView",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Backbone.View"
                },
                {
                    "name": "eventNames",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 732,
            "description": "Removes module from one that the mediator should be listening for.",
            "itemtype": "method",
            "name": "removeView",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Backbone.View"
                }
            ],
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 752,
            "description": "Returns boolean for whether the mediator contains a view or not.",
            "itemtype": "method",
            "name": "hasView",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Backbone.View"
                }
            ],
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 767,
            "description": "Returns a view that has the same value/key pairs provided",
            "itemtype": "method",
            "name": "getView",
            "params": [
                {
                    "name": "attribute",
                    "description": "Key/Value pair to use with an UnderscoreJS _.with look up",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t...\n\tmediator.getView({name:\"foo\"});"
            ],
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 792,
            "description": "Returns a view that has the same **user defined** name provided",
            "itemtype": "method",
            "name": "getViewByName",
            "params": [
                {
                    "name": "name",
                    "description": "User defined view name",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t...\n\tmediator.getView({name:\"foo\"});"
            ],
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 814,
            "description": "destroys a mediator and removes all listeners.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 828,
            "description": "Handler method that is called when one of the module the mediator is listening\nfor is fired. Should be overriden in `Mediator` instances.",
            "itemtype": "method",
            "name": "handle",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "module",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 841,
            "description": "Runs through all of the events that the mediator should be listening for.",
            "itemtype": "method",
            "name": "processEvents",
            "params": [
                {
                    "name": "events",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 861,
            "description": "Processes all of the viewEvents passes in through the mediator config options",
            "itemtype": "method",
            "name": "processViewEvents",
            "params": [
                {
                    "name": "events",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 879,
            "description": "Assigns a callback to the passed dispatcher for the event to be fired.",
            "itemtype": "method",
            "name": "assignCallbackToDispatcher",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callbackName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dispatcher",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rebar.Mediator",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 923,
            "description": "Reference to the model the controller will be interacting with",
            "itemtype": "property",
            "name": "model",
            "type": "Backbone.Model",
            "class": "Rebar.Controller",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 979,
            "description": "Default landing for no hash. Where the browser will be routed to when landing\non the root url of the applicaiton.",
            "itemtype": "property",
            "name": "landing",
            "type": "{String}",
            "default": "\"\"",
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 991,
            "description": "Define only the route hash here because we'll be using dependency routing\nfor the rest of the functionality.",
            "itemtype": "property",
            "name": "routes",
            "type": "{Object} route key value pairs",
            "default": "{ \"\": \"handleNoHash\", \"*splat\": \"handleAll\" }",
            "access": "private",
            "tagname": "",
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1007,
            "description": "This object is empty by default, but routes added here, either manually,\nor through the two methods, setStaticRoute and setStaticRoutes, will bypass\nthe handleAll and handleNoHash methods referenced in the routes object.",
            "itemtype": "property",
            "name": "staticRoutes",
            "type": "{Object} static route key value pairs",
            "access": "private",
            "tagname": "",
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1020,
            "description": "Reroute the page to the page referenced as landing",
            "itemtype": "method",
            "name": "handleNoHash",
            "access": "private",
            "tagname": "",
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1032,
            "description": "Handles every route that doesnt match any of the previous matches",
            "itemtype": "method",
            "name": "handleAll",
            "access": "private",
            "tagname": "",
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1062,
            "description": "Parses a passed route string and determains directory, file, view and data",
            "itemtype": "method",
            "name": "parseRoute",
            "params": [
                {
                    "name": "route",
                    "description": "The current Backbone.history fragment",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1119,
            "description": "Parse the query string provides and returns key value pair object",
            "itemtype": "method",
            "name": "parseRouteData",
            "params": [
                {
                    "name": "query",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1141,
            "description": "Takes a passed route object and determains a file location",
            "itemtype": "method",
            "name": "getFileLocation",
            "params": [
                {
                    "name": "route",
                    "description": "Object formed in parseRoute method",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1160,
            "description": "Adds the name and method to the staticRoutes object as a key/value pair",
            "itemtype": "method",
            "name": "setStaticRoute",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1173,
            "description": "Takes key value pairs from an object and sets them to the staticRoutes\nobject on the router",
            "itemtype": "method",
            "name": "setStaticRoutes",
            "params": [
                {
                    "name": "routes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Rebar.DependencyRouter",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1230,
            "description": "console.log wrapper",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Rebar.Logger",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1237,
            "description": "console.warn wrapper",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Rebar.Logger",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1244,
            "description": "console.error wrapper",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Rebar.Logger",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1251,
            "description": "Sets the log level for the logger",
            "itemtype": "method",
            "name": "setLogLevel",
            "params": [
                {
                    "name": "logLevel",
                    "description": "",
                    "type": "Logger.Levels"
                }
            ],
            "class": "Rebar.Logger",
            "namespace": "Rebar"
        },
        {
            "file": "../temp/backbone.rebar.js",
            "line": 1258,
            "description": "Possible log levels to set the logger to",
            "itemtype": "property",
            "name": "Levels",
            "static": 1,
            "class": "Rebar.Logger",
            "namespace": "Rebar"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " ../temp/backbone.rebar.js:4"
        }
    ]
}